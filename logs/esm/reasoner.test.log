[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: true
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: []
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "\n\t\t       <a> <b> \"1\" .\n\t\t       { <a> <b> ?x } => { <a> <c> ?x } .\n\t       "
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "\n\t\t       <a> <b> \"1\" .\n\t\t       { <a> <b> ?x } => { <a> <c> ?x } .\n\t       "
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "\n\t\t       <a> <b> \"1\" .\n\t\t       { <a> <b> ?x } => { <a> <c> ?x } .\n\t       "
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "\n\t\t       <a> <b> \"1\" .\n\t\t       { <a> <b> ?x } => { <a> <c> ?x } .\n\t       "
}
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicParser] Parsing input 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "1" . { <a> <b> ?x } => { <a> <c> ?x } . false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "1" . { <a> <b> ?x } => { <a> <c> ?x } . false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[parseRules][DEBUG] antecedent string: "<a> <b> ?x"
[parseRules][DEBUG] splitAntecedent statements: ["<a> <b> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <c> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <c> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: 
		       <a> <b> "1" .
		       { <a> <b> ?x } => { <a> <c> ?x } .
	       
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][DEBUG] Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ],
  "rules": [
    {
      "type": "Rule",
      "antecedent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "b"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      },
      "consequent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "c"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      }
    }
  ]
}
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ],
  "rules": [
    {
      "type": "Rule",
      "antecedent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "b"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      },
      "consequent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "c"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      }
    }
  ]
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] tripleToString output: a b "1"
[N3LogicReasoner][TRACE] tripleToString output: a b "1"
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Adding new inferred triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Adding new inferred triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterRuleApplied [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterRuleApplied [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterRuleApplied args: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterRuleApplied args: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterRuleApplied
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterRuleApplied
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: [
  "a c \"1\""
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: [
  "a c \"1\""
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: [
  0
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: [
  0
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=true ===

[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=true ===

[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 2 START ===
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 2 START ===
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "c"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "c"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termEquals: object equality false
[N3LogicReasoner][TRACE] termEquals: object equality false
[N3LogicReasoner][TRACE] matchTriple: predicate did not match {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] matchTriple: predicate did not match {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Triple already present, skipping for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Triple already present, skipping for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 2 END. changed=false ===

[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 2 END. changed=false ===

[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"1\"",
  "a c \"1\""
]
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"1\"",
  "a c \"1\""
]
[N3LogicReasoner][TRACE] stringToTriple input: a b "1"
[N3LogicReasoner][TRACE] stringToTriple input: a b "1"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"1\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"1\""
}
[N3LogicReasoner][TRACE] stringToTriple input: a c "1"
[N3LogicReasoner][TRACE] stringToTriple input: a c "1"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "c",
  "object": "\"1\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "c",
  "object": "\"1\""
}
[TEST reasoner] All inferred triples: [
  "<a> <b> \"1\" .",
  "<a> <c> \"1\" ."
]
[TEST reasoner] Inferred triple for predicate c: <a> <c> "1" .
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: true
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: true
[N3LogicReasoner][TRACE] [N3LogicReasoner] registerBuiltin called: {
  "uri": "http://example.org/custom#isFoo",
  "arity": 1,
  "description": "Returns true if the subject is the literal \"foo\""
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] registerBuiltin called: {
  "uri": "http://example.org/custom#isFoo",
  "arity": 1,
  "description": "Returns true if the subject is the literal \"foo\""
}
[N3LogicReasoner][DEBUG] Reasoner: All triples at start: []
[N3LogicReasoner][DEBUG] Reasoner: All triples at start: []
[N3LogicReasoner][DEBUG] Reasoner: All rules at start: []
[N3LogicReasoner][DEBUG] Reasoner: All rules at start: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins before registerBuiltin: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins before registerBuiltin: []
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins after registerBuiltin: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins after registerBuiltin: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins after registerBuiltin: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins after registerBuiltin: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicParser] Parsing input <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: []
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] Parsed rules: []
[N3LogicReasoner][DEBUG] Parsed rules: []
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ],
  "rules": []
}
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ],
  "rules": []
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "foo"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "foo"
}
[N3LogicReasoner][TRACE] tripleToString output: a b "foo"
[N3LogicReasoner][TRACE] tripleToString output: a b "foo"
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "foo" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "foo" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "bar"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "bar"
}
[N3LogicReasoner][TRACE] tripleToString output: a b "bar"
[N3LogicReasoner][TRACE] tripleToString output: a b "bar"
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "bar" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "bar" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=false ===

[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=false ===

[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"foo\"",
  "a b \"bar\""
]
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"foo\"",
  "a b \"bar\""
]
[N3LogicReasoner][TRACE] stringToTriple input: a b "foo"
[N3LogicReasoner][TRACE] stringToTriple input: a b "foo"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"foo\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"foo\""
}
[N3LogicReasoner][TRACE] stringToTriple input: a b "bar"
[N3LogicReasoner][TRACE] stringToTriple input: a b "bar"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"bar\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"bar\""
}
[TEST reasoner custom builtins] All inferred triples: [
  "<a> <b> \"foo\" .",
  "<a> <b> \"bar\" ."
]
[DEBUG] result.triples: [
  "<a> <b> \"foo\" .",
  "<a> <b> \"bar\" ."
]
[DEBUG] inferredTriple: 
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: false
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: false
[N3LogicReasoner][TRACE] [N3LogicReasoner] registerBuiltin called: {
  "uri": "http://example.org/custom#isFoo",
  "arity": 1,
  "description": "Returns true if the subject is the literal \"foo\""
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] registerBuiltin called: {
  "uri": "http://example.org/custom#isFoo",
  "arity": 1,
  "description": "Returns true if the subject is the literal \"foo\""
}
[N3LogicReasoner][DEBUG] Reasoner: All triples at start: []
[N3LogicReasoner][DEBUG] Reasoner: All triples at start: []
[N3LogicReasoner][DEBUG] Reasoner: All rules at start: []
[N3LogicReasoner][DEBUG] Reasoner: All rules at start: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins before registerBuiltin: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins before registerBuiltin: []
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins after registerBuiltin: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Builtins after registerBuiltin: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins after registerBuiltin: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins after registerBuiltin: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "<a> <b> \"foo\" . <a> <b> \"bar\" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } ."
}
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicParser] Parsing input <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "foo"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "bar"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: <a> <b> "foo" . <a> <b> "bar" . { <a> <b> ?x . ?x <http://example.org/custom
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: []
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] Parsed rules: []
[N3LogicReasoner][DEBUG] Parsed rules: []
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        }
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        }
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: [
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs",
  "http://example.org/custom#isFoo"
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ],
  "rules": []
}
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ],
  "rules": []
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "foo"
        },
        "_id": 1,
        "_provenance": "asserted"
      },
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "bar"
        },
        "_id": 2,
        "_provenance": "asserted"
      }
    ],
    "rules": [],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      },
      {
        "uri": "http://example.org/custom#isFoo",
        "arity": 1,
        "description": "Returns true if the subject is the literal \"foo\""
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "foo"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "foo"
}
[N3LogicReasoner][TRACE] tripleToString output: a b "foo"
[N3LogicReasoner][TRACE] tripleToString output: a b "foo"
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "foo" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "foo" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "bar"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "bar"
}
[N3LogicReasoner][TRACE] tripleToString output: a b "bar"
[N3LogicReasoner][TRACE] tripleToString output: a b "bar"
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "bar" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "bar" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  },
  "_id": 2,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    },
    "_id": 2,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=false ===

[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=false ===

[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      },
      "_id": 2,
      "_provenance": "asserted"
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"foo\"",
  "a b \"bar\""
]
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"foo\"",
  "a b \"bar\""
]
[N3LogicReasoner][TRACE] stringToTriple input: a b "foo"
[N3LogicReasoner][TRACE] stringToTriple input: a b "foo"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"foo\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"foo\""
}
[N3LogicReasoner][TRACE] stringToTriple input: a b "bar"
[N3LogicReasoner][TRACE] stringToTriple input: a b "bar"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"bar\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"bar\""
}
[DIAG] All triples: [
  "<a> <b> \"foo\" .",
  "<a> <b> \"bar\" ."
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: true
[N3LogicReasoner][TRACE] [N3LogicReasoner] setDebug called: true
[N3LogicReasoner][TRACE] [N3LogicReasoner] on(hookName) called: afterRuleApplied callback: () => {
            hookFired = true;
            // Defer assertion to next tick to ensure hook fires
            setTimeout(() => {
                expect(hookFired).toBe(true);
                done();
            }, 0);
        }
[N3LogicReasoner][TRACE] [N3LogicReasoner] on(hookName) called: afterRuleApplied callback: () => {
            hookFired = true;
            // Defer assertion to next tick to ensure hook fires
            setTimeout(() => {
                expect(hookFired).toBe(true);
                done();
            }, 0);
        }
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before loadOntology: []
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"1\" .\n\t\t\t{ <a> <b> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] loadOntology called: {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"1\" .\n\t\t\t{ <a> <b> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"1\" .\n\t\t\t{ <a> <b> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicReasoner][DEBUG] Loading ontology {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"1\" .\n\t\t\t{ <a> <b> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] parse called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] Parsing input 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicParser] Parsing input 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "1" . { <a> <b> ?x } => { <a> <c> ?x } . false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> "1" . { <a> <b> ?x } => { <a> <c> ?x } . false
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: "1"
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] parseRules called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [RuleExtractor] extractRules called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[parseRules][DEBUG] antecedent string: "<a> <b> ?x"
[parseRules][DEBUG] splitAntecedent statements: ["<a> <b> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <b> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <b>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <c> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples called: <a> <c> ?x true
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <a>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: <c>
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTerm called: ?x
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] parseBuiltins called: 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][TRACE] [N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Parsed rules after parsing: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] Parsed triples after parsing: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] N3LogicReasoner: Rule #0 consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins after loadOntology: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG][LOGGING] document.builtins after loadOntology: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][DEBUG] Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterLoadOntology [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterLoadOntology args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        }
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterLoadOntology
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [REASONER] Starting reason() method. Current builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [N3LogicReasoner] reason() called
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] customBuiltins before reasoning: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] document.builtins before reasoning: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ],
  "rules": [
    {
      "type": "Rule",
      "antecedent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "b"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      },
      "consequent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "c"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      }
    }
  ]
}
[N3LogicReasoner][DEBUG] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ],
  "rules": [
    {
      "type": "Rule",
      "antecedent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "b"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      },
      "consequent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "c"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      }
    }
  ]
}
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: beforeReason [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: beforeReason args: [
  {
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Literal",
          "value": "1"
        },
        "_id": 1,
        "_provenance": "asserted"
      }
    ],
    "rules": [
      {
        "type": "Rule",
        "antecedent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "b"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        },
        "consequent": {
          "type": "Formula",
          "triples": [
            {
              "subject": {
                "type": "IRI",
                "value": "a"
              },
              "predicate": {
                "type": "IRI",
                "value": "c"
              },
              "object": {
                "type": "Variable",
                "value": "x"
              }
            }
          ]
        }
      }
    ],
    "builtins": [
      {
        "uri": "http://www.w3.org/2000/10/swap/log#not",
        "arity": 1,
        "description": "log:not(x) is true if x is false"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#implies",
        "arity": 2,
        "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
        "arity": 2,
        "description": "log:equalTo(x, y) is true if x === y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#or",
        "arity": 2,
        "description": "log:or(x, y) is true if x or y is true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#and",
        "arity": 2,
        "description": "log:and(x, y) is true if both x and y are true"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#xor",
        "arity": 2,
        "description": "log:xor(x, y) is true if x and y differ"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#if",
        "arity": 3,
        "description": "log:if(cond, then, else) returns then if cond is true, else else"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/log#distinct",
        "arity": 2,
        "description": "log:distinct(x, y) is true if x != y"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
        "arity": 1,
        "description": "type:isLiteral(x) is true if x is a literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
        "arity": 1,
        "description": "type:isIRI(x) is true if x is an IRI"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
        "arity": 1,
        "description": "type:isBlank(x) is true if x is a blank node"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toString",
        "arity": 1,
        "description": "type:toString(x) returns x as string"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
        "arity": 1,
        "description": "type:toNumber(x) returns x as number literal"
      },
      {
        "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
        "arity": 1,
        "description": "type:toBoolean(x) returns x as boolean literal"
      },
      {
        "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
        "arity": 2,
        "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
      },
      {
        "uri": "http://www.w3.org/2002/07/owl#sameAs",
        "arity": 2,
        "description": "owl:sameAs(x, y) is true if x and y are the same"
      }
    ]
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: beforeReason
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] tripleToString output: a b "1"
[N3LogicReasoner][TRACE] tripleToString output: a b "1"
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] Adding initial triple to inferred set: a b "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  },
  "_id": 1,
  "_provenance": "asserted"
}
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 1 START ===
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    }
  ]
}
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Adding new inferred triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Adding new inferred triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterRuleApplied [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterRuleApplied [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterRuleApplied args: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterRuleApplied args: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Firing hook: afterRuleApplied args: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Firing hook: afterRuleApplied args: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterRuleApplied
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterRuleApplied
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: [
  "a c \"1\""
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 1: [
  "a c \"1\""
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: [
  0
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 1: [
  0
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 1: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=true ===

[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 1 END. changed=true ===

[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 2 START ===
[N3LogicReasoner][DEBUG] 
=== Reasoning iteration 2 START ===
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] Current triple store at start of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Evaluating rule #0: {"type":"Rule","antecedent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]},"consequent":{"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Matching antecedent for rule #0: {"type":"Formula","triples":[{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][TRACE] [builtinsManager] mergeBuiltins called: [] Resulting merged builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "typeofApply": "function"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "typeofApply": "function"
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent called with: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}] [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Using mergedBuiltins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Checking pattern triple # 0 : {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Pattern triple details: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Attempting builtin match for triple predicate: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] All builtins at this point: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#not against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#implies against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#equalTo against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#or against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#and against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#xor against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#if against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/log#distinct against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isLiteral against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isIRI against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#isBlank against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toString against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toNumber against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2000/10/swap/type#toBoolean against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/1999/02/22-rdf-syntax-ns#type against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Checking builtin candidate: http://www.w3.org/2002/07/owl#sameAs against predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin match found for predicateUri: b
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtin found: false for predicateUri: b triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] No builtin found, matching pattern triple against data triples.
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  }
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "b"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Pattern is variable: x
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data triple matched: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"},"_id":1,"_provenance":"asserted"} bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtins available at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Patterns: []
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG][LOGGING] Builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent called with patterns: [] data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
] builtins: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] Builtins at match time: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: patterns: []
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/log#not",
    "arity": 1,
    "description": "log:not(x) is true if x is false"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#implies",
    "arity": 2,
    "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
    "arity": 2,
    "description": "log:equalTo(x, y) is true if x === y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#or",
    "arity": 2,
    "description": "log:or(x, y) is true if x or y is true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#and",
    "arity": 2,
    "description": "log:and(x, y) is true if both x and y are true"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#xor",
    "arity": 2,
    "description": "log:xor(x, y) is true if x and y differ"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#if",
    "arity": 3,
    "description": "log:if(cond, then, else) returns then if cond is true, else else"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/log#distinct",
    "arity": 2,
    "description": "log:distinct(x, y) is true if x != y"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/log#not",
  "http://www.w3.org/2000/10/swap/log#implies",
  "http://www.w3.org/2000/10/swap/log#equalTo",
  "http://www.w3.org/2000/10/swap/log#or",
  "http://www.w3.org/2000/10/swap/log#and",
  "http://www.w3.org/2000/10/swap/log#xor",
  "http://www.w3.org/2000/10/swap/log#if",
  "http://www.w3.org/2000/10/swap/log#distinct",
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][TRACE] No patterns left, returning [{}]
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][TRACE] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "a"
} {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termEquals: object equality true
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "c"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "c"
  },
  "bindings": {}
}
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] Pattern is not variable, checking term equality
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termEquals input: {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termEquals: object equality false
[N3LogicReasoner][TRACE] termEquals: object equality false
[N3LogicReasoner][TRACE] matchTriple: predicate did not match {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] matchTriple: predicate did not match {
  "type": "IRI",
  "value": "b"
} {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent returning results: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [MATCHER][DEBUG] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] matchAntecedent result: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings list from matchFormula for rule #0: [{"x":{"type":"Literal","value":"1"}}]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Bindings #0 before evaluateBuiltins for rule #0: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][TRACE] [builtinEvaluator] evaluateBuiltins called: {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/log#not",
      "arity": 1,
      "description": "log:not(x) is true if x is false"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#implies",
      "arity": 2,
      "description": "log:implies(x, y) is true if x implies y (handled by rule engine)"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#equalTo",
      "arity": 2,
      "description": "log:equalTo(x, y) is true if x === y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#or",
      "arity": 2,
      "description": "log:or(x, y) is true if x or y is true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#and",
      "arity": 2,
      "description": "log:and(x, y) is true if both x and y are true"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#xor",
      "arity": 2,
      "description": "log:xor(x, y) is true if x and y differ"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#if",
      "arity": 3,
      "description": "log:if(cond, then, else) returns then if cond is true, else else"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/log#distinct",
      "arity": 2,
      "description": "log:distinct(x, y) is true if x != y"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][DEBUG] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][TRACE] [builtinEvaluator][UNMISTAKABLE] Checking builtin for predicate: b Found: false Function:  Typeof: 
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] evaluateBuiltins returning true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] evaluateBuiltins result for rule #0, bindings #0: true
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiating consequent triple #0 for rule #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}} with bindings: {"x":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Instantiated triple for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] tripleToString input: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "a"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "IRI",
  "value": "c"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] termToString input: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][TRACE] tripleToString output: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Checking if triple is already inferred for rule #0, consIdx #0: a c "1" {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}}
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Triple already present, skipping for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Triple already present, skipping for rule #0, consIdx #0: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Literal","value":"1"}} Key: a c "1"
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] New triples inferred in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Rules fired in iteration 2: []
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] Current triple store at end of iteration 2: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    },
    "_id": 1,
    "_provenance": "asserted"
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 2 END. changed=false ===

[N3LogicReasoner][DEBUG] [N3LogicReasoner][DEBUG] === Reasoning iteration 2 END. changed=false ===

[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner] runHook called: afterReason [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] About to fire hook: afterReason args: [
  [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      },
      "_id": 1,
      "_provenance": "asserted"
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
]
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][TRACE] [N3LogicReasoner][HOOKS] Finished firing hook: afterReason
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"1\"",
  "a c \"1\""
]
[N3LogicReasoner][DEBUG] Reasoning complete. Inferred triples: [
  "a b \"1\"",
  "a c \"1\""
]
[N3LogicReasoner][TRACE] stringToTriple input: a b "1"
[N3LogicReasoner][TRACE] stringToTriple input: a b "1"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"1\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "b",
  "object": "\"1\""
}
[N3LogicReasoner][TRACE] stringToTriple input: a c "1"
[N3LogicReasoner][TRACE] stringToTriple input: a c "1"
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "c",
  "object": "\"1\""
}
[N3LogicReasoner][TRACE] stringToTriple output: {
  "subject": "a",
  "predicate": "c",
  "object": "\"1\""
}
