[N3LogicReasoner] Debug mode set to true
[N3LogicReasoner] Loading ontology {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"1\" .\n\t\t\t{ <a> <b> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicReasoner] N3LogicReasoner: Parsed rules after parsing: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner] N3LogicReasoner: Rule #0 antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] N3LogicReasoner: Rule #0 consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ],
  "rules": [
    {
      "type": "Rule",
      "antecedent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "b"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      },
      "consequent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "c"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      }
    }
  ]
}
[N3LogicReasoner] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] Adding initial triple to inferred set: a b "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Reasoning iteration 1 start. changed=true
[N3LogicReasoner] Evaluating rule #0: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Registered builtins at matchAntecedent: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] Checking for builtin with predicate value: b
[N3LogicReasoner] No builtin matched for predicate: b
[N3LogicReasoner] No builtin matched, matching against data triples
[N3LogicReasoner] Matching triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} against pattern: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is variable: x
[N3LogicReasoner] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Triple matched, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] matchAntecedent: patterns: []
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] No patterns left, returning [{}]
[N3LogicReasoner] Bindings compatible, pushing merged bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] Bindings list from matchFormula: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
] for rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] Bindings #0 before evaluateBuiltins: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
} Rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] evaluateBuiltins returning true
[N3LogicReasoner] evaluateBuiltins result: true Bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiating consequent triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiated triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} from: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Checking if triple is already inferred: a c "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Adding new inferred triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} Key: a c "1"
[N3LogicReasoner] Reasoning iteration 1 end. changed=true
[N3LogicReasoner] Reasoning iteration 2 start. changed=true
[N3LogicReasoner] Evaluating rule #0: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Registered builtins at matchAntecedent: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] Checking for builtin with predicate value: b
[N3LogicReasoner] No builtin matched for predicate: b
[N3LogicReasoner] No builtin matched, matching against data triples
[N3LogicReasoner] Matching triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} against pattern: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is variable: x
[N3LogicReasoner] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Triple matched, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] matchAntecedent: patterns: []
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] No patterns left, returning [{}]
[N3LogicReasoner] Bindings compatible, pushing merged bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Matching triple #1: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} against pattern: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "c"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] Triple did not match pattern
[N3LogicReasoner] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] Bindings list from matchFormula: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
] for rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] Bindings #0 before evaluateBuiltins: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
} Rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] evaluateBuiltins returning true
[N3LogicReasoner] evaluateBuiltins result: true Bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiating consequent triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiated triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} from: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Checking if triple is already inferred: a c "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Triple already present, skipping: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} Key: a c "1"
[N3LogicReasoner] Reasoning iteration 2 end. changed=false
[N3LogicReasoner] Reasoning complete. Inferred triples: [
  "a b \"1\"",
  "a c \"1\""
]
[TEST reasoner] All inferred triples: [
  {
    "subject": "a",
    "predicate": "b",
    "object": "\"1\""
  },
  {
    "subject": "a",
    "predicate": "c",
    "object": "\"1\""
  }
]
[TEST reasoner] Inferred triple for predicate c: 
[N3LogicReasoner] Debug mode set to true
[N3LogicReasoner] Reasoner: All triples at start: []
[N3LogicReasoner] Reasoner: All rules at start: []
[N3LogicParser] Debug mode set to true
[N3LogicParser] Parsing input 
			<a> <b> "foo" .
			<a> <b> "bar" .
			{ <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
		
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicParser] N3LogicParser: Parsed builtins: []
[TEST] Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[TEST] Parsed rules: []
[N3LogicReasoner] Loading ontology {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"foo\" .\n\t\t\t<a> <b> \"bar\" .\n\t\t\t{ <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicParser] Parsing input 
			<a> <b> "foo" .
			<a> <b> "bar" .
			{ <a> <b> ?x . ?x <http://example.org/custom#isFoo> ?x } => { <a> <c> ?x } .
		
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "foo"
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"foo\""]
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "foo"
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "bar"
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"bar\""]
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "bar"
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x"]
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Tokenizing statement: ?x <http://example
[N3LogicParser] parseTriples: Tokenized terms: ["?x","<http://example"]
[N3LogicParser] parseTriples: Tokenizing statement: org/custom
[N3LogicParser] parseTriples: Tokenized terms: ["org/custom"]
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"foo"}},{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"bar"}}]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed rules: []
[N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner] N3LogicReasoner: Parsed rules after parsing: []
[N3LogicReasoner] Parsed rules: []
[N3LogicReasoner] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  },
  {
    "uri": "http://example.org/custom#isFoo",
    "arity": 1,
    "description": "Returns true if the subject is the literal \"foo\""
  }
]
[N3LogicReasoner] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "foo"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "bar"
      }
    }
  ],
  "rules": []
}
[N3LogicReasoner] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "foo"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "bar"
    }
  }
]
[N3LogicReasoner] Adding initial triple to inferred set: a b "foo" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "foo"
  }
}
[N3LogicReasoner] Adding initial triple to inferred set: a b "bar" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "bar"
  }
}
[N3LogicReasoner] Reasoning iteration 1 start. changed=true
[N3LogicReasoner] Reasoning iteration 1 end. changed=false
[N3LogicReasoner] Reasoning complete. Inferred triples: [
  "a b \"foo\"",
  "a b \"bar\""
]
[TEST reasoner custom builtins] All inferred triples: [
  {
    "subject": "a",
    "predicate": "b",
    "object": "\"foo\""
  },
  {
    "subject": "a",
    "predicate": "b",
    "object": "\"bar\""
  }
]
[N3LogicReasoner] Debug mode set to true
[N3LogicReasoner] Loading ontology {
  "format": "n3",
  "data": "\n\t\t\t<a> <b> \"1\" .\n\t\t\t{ <a> <b> ?x } => { <a> <c> ?x } .\n\t\t"
}
[N3LogicParser] Parsing input 
			<a> <b> "1" .
			{ <a> <b> ?x } => { <a> <c> ?x } .
		
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> "1"
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","\"1\""]
[N3LogicParser] parseTriples: Triple tokens: <a> <b> "1"
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Tokenizing statement: { <a> <b> ?x } => { <a> <c> ?x }
[N3LogicParser] parseTriples: Tokenized terms: ["{","<a>","<b>","?x","}","=>","{","<a>","<c>","?x","}"]
[N3LogicParser] parseTriples: Triple tokens: { <a> <b>
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Triple tokens: ?x } =>
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Triple tokens: { <a> <c>
[N3LogicParser] parseTriples: Skipping invalid triple tokens
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Literal","value":"1"}}]
[N3LogicParser] N3LogicParser: Parsed triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicParser] parseRules: antecedent string: "<a> <b> ?x"
[N3LogicParser] parseRules: consequent string: "<a> <c> ?x"
[N3LogicParser] parseTriples: Splitting rule block: <a> <b> ?x
[N3LogicParser] splitTriples: Found triple statement: <a> <b> ?x
[N3LogicParser] splitTriples: All split statements: [
  "<a> <b> ?x"
]
[N3LogicParser] parseTriples: splitTriples returned: ["<a> <b> ?x"]
[N3LogicParser] parseTriples: Tokenizing statement: <a> <b> ?x
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<b>","?x"]
[N3LogicParser] parseTriples: Triple tokens: <a> <b> ?x
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: b
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"b"},"object":{"type":"Variable","value":"x"}}]
[N3LogicParser] parseTriples: Splitting rule block: <a> <c> ?x
[N3LogicParser] splitTriples: Found triple statement: <a> <c> ?x
[N3LogicParser] splitTriples: All split statements: [
  "<a> <c> ?x"
]
[N3LogicParser] parseTriples: splitTriples returned: ["<a> <c> ?x"]
[N3LogicParser] parseTriples: Tokenizing statement: <a> <c> ?x
[N3LogicParser] parseTriples: Tokenized terms: ["<a>","<c>","?x"]
[N3LogicParser] parseTriples: Triple tokens: <a> <c> ?x
[N3LogicParser] parseTriples: Parsed triple: {"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}
[N3LogicParser] parseTriples: Predicate type: IRI Predicate value: c
[N3LogicParser] parseTriples: Final parsed triples: [{"subject":{"type":"IRI","value":"a"},"predicate":{"type":"IRI","value":"c"},"object":{"type":"Variable","value":"x"}}]
[N3LogicParser] Parsed rule antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicParser] Parsed rule consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicParser] N3LogicParser: Parsed builtins: []
[N3LogicReasoner] N3LogicReasoner: Parsed rules after parsing: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner] N3LogicReasoner: Rule #0 antecedent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] N3LogicReasoner: Rule #0 consequent triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] Parsed rules: [
  {
    "type": "Rule",
    "antecedent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "b"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    },
    "consequent": {
      "type": "Formula",
      "triples": [
        {
          "subject": {
            "type": "IRI",
            "value": "a"
          },
          "predicate": {
            "type": "IRI",
            "value": "c"
          },
          "object": {
            "type": "Variable",
            "value": "x"
          }
        }
      ]
    }
  }
]
[N3LogicReasoner] Merged builtins for reasoning: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] Starting reasoning {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ],
  "rules": [
    {
      "type": "Rule",
      "antecedent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "b"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      },
      "consequent": {
        "type": "Formula",
        "triples": [
          {
            "subject": {
              "type": "IRI",
              "value": "a"
            },
            "predicate": {
              "type": "IRI",
              "value": "c"
            },
            "object": {
              "type": "Variable",
              "value": "x"
            }
          }
        ]
      }
    }
  ]
}
[N3LogicReasoner] Initial working triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] Adding initial triple to inferred set: a b "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Reasoning iteration 1 start. changed=true
[N3LogicReasoner] Evaluating rule #0: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Registered builtins at matchAntecedent: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] Checking for builtin with predicate value: b
[N3LogicReasoner] No builtin matched for predicate: b
[N3LogicReasoner] No builtin matched, matching against data triples
[N3LogicReasoner] Matching triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} against pattern: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is variable: x
[N3LogicReasoner] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Triple matched, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] matchAntecedent: patterns: []
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] No patterns left, returning [{}]
[N3LogicReasoner] Bindings compatible, pushing merged bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] Bindings list from matchFormula: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
] for rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] Bindings #0 before evaluateBuiltins: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
} Rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] evaluateBuiltins returning true
[N3LogicReasoner] evaluateBuiltins result: true Bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiating consequent triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiated triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} from: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Checking if triple is already inferred: a c "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Adding new inferred triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} Key: a c "1"
[N3LogicReasoner] Reasoning iteration 1 end. changed=true
[N3LogicReasoner] Reasoning iteration 2 start. changed=true
[N3LogicReasoner] Evaluating rule #0: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] matchFormula called {
  "formula": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Formula type is Formula, matching antecedent: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: patterns: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] Registered builtins at matchAntecedent: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] Checking for builtin with predicate value: b
[N3LogicReasoner] No builtin matched for predicate: b
[N3LogicReasoner] No builtin matched, matching against data triples
[N3LogicReasoner] Matching triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} against pattern: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "b"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "Variable",
    "value": "x"
  },
  "value": {
    "type": "Literal",
    "value": "1"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is variable: x
[N3LogicReasoner] Binding variable: x to value: {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] matchTriple succeeded, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Triple matched, bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] matchAntecedent: patterns: []
[N3LogicReasoner] matchAntecedent: data: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  },
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: builtins: [
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
    "arity": 1,
    "description": "type:isLiteral(x) is true if x is a literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
    "arity": 1,
    "description": "type:isIRI(x) is true if x is an IRI"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
    "arity": 1,
    "description": "type:isBlank(x) is true if x is a blank node"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toString",
    "arity": 1,
    "description": "type:toString(x) returns x as string"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
    "arity": 1,
    "description": "type:toNumber(x) returns x as number literal"
  },
  {
    "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
    "arity": 1,
    "description": "type:toBoolean(x) returns x as boolean literal"
  },
  {
    "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    "arity": 2,
    "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
  },
  {
    "uri": "http://www.w3.org/2002/07/owl#sameAs",
    "arity": 2,
    "description": "owl:sameAs(x, y) is true if x and y are the same"
  }
]
[N3LogicReasoner] matchAntecedent: builtin URIs: [
  "http://www.w3.org/2000/10/swap/type#isLiteral",
  "http://www.w3.org/2000/10/swap/type#isIRI",
  "http://www.w3.org/2000/10/swap/type#isBlank",
  "http://www.w3.org/2000/10/swap/type#toString",
  "http://www.w3.org/2000/10/swap/type#toNumber",
  "http://www.w3.org/2000/10/swap/type#toBoolean",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
  "http://www.w3.org/2002/07/owl#sameAs"
]
[N3LogicReasoner] matchAntecedent called {
  "patterns": [],
  "data": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    },
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "c"
      },
      "object": {
        "type": "Literal",
        "value": "1"
      }
    }
  ]
}
[N3LogicReasoner] No patterns left, returning [{}]
[N3LogicReasoner] Bindings compatible, pushing merged bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Matching triple #1: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} against pattern: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] matchTriple called {
  "pattern": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "a"
  },
  "value": {
    "type": "IRI",
    "value": "a"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] termMatch called {
  "pattern": {
    "type": "IRI",
    "value": "b"
  },
  "value": {
    "type": "IRI",
    "value": "c"
  },
  "bindings": {}
}
[N3LogicReasoner] Pattern is not variable, checking term equality
[N3LogicReasoner] Triple did not match pattern
[N3LogicReasoner] matchAntecedent returning results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] matchAntecedent: final results: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
]
[N3LogicReasoner] Bindings list from matchFormula: [
  {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
] for rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] Bindings #0 before evaluateBuiltins: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
} Rule: {
  "type": "Rule",
  "antecedent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "b"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  },
  "consequent": {
    "type": "Formula",
    "triples": [
      {
        "subject": {
          "type": "IRI",
          "value": "a"
        },
        "predicate": {
          "type": "IRI",
          "value": "c"
        },
        "object": {
          "type": "Variable",
          "value": "x"
        }
      }
    ]
  }
}
[N3LogicReasoner] evaluateBuiltins: triples: [
  {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "b"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  }
]
[N3LogicReasoner] evaluateBuiltins: bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] evaluateBuiltins called {
  "triples": [
    {
      "subject": {
        "type": "IRI",
        "value": "a"
      },
      "predicate": {
        "type": "IRI",
        "value": "b"
      },
      "object": {
        "type": "Variable",
        "value": "x"
      }
    }
  ],
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  },
  "builtins": [
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isLiteral",
      "arity": 1,
      "description": "type:isLiteral(x) is true if x is a literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isIRI",
      "arity": 1,
      "description": "type:isIRI(x) is true if x is an IRI"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#isBlank",
      "arity": 1,
      "description": "type:isBlank(x) is true if x is a blank node"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toString",
      "arity": 1,
      "description": "type:toString(x) returns x as string"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toNumber",
      "arity": 1,
      "description": "type:toNumber(x) returns x as number literal"
    },
    {
      "uri": "http://www.w3.org/2000/10/swap/type#toBoolean",
      "arity": 1,
      "description": "type:toBoolean(x) returns x as boolean literal"
    },
    {
      "uri": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
      "arity": 2,
      "description": "rdf:type(x, y) is true if x is of type y (handled by triple matching)"
    },
    {
      "uri": "http://www.w3.org/2002/07/owl#sameAs",
      "arity": 2,
      "description": "owl:sameAs(x, y) is true if x and y are the same"
    }
  ]
}
[N3LogicReasoner] evaluateBuiltins: checking triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "b"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
}
[N3LogicReasoner] evaluateBuiltins returning true
[N3LogicReasoner] evaluateBuiltins result: true Bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiating consequent triple #0: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] instantiateTriple called {
  "triple": {
    "subject": {
      "type": "IRI",
      "value": "a"
    },
    "predicate": {
      "type": "IRI",
      "value": "c"
    },
    "object": {
      "type": "Variable",
      "value": "x"
    }
  },
  "bindings": {
    "x": {
      "type": "Literal",
      "value": "1"
    }
  }
}
[N3LogicReasoner] Substituting variable in triple: x with {
  "type": "Literal",
  "value": "1"
}
[N3LogicReasoner] instantiateTriple result: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Instantiated triple: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} from: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Variable",
    "value": "x"
  }
} with bindings: {
  "x": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Checking if triple is already inferred: a c "1" {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
}
[N3LogicReasoner] Triple already present, skipping: {
  "subject": {
    "type": "IRI",
    "value": "a"
  },
  "predicate": {
    "type": "IRI",
    "value": "c"
  },
  "object": {
    "type": "Literal",
    "value": "1"
  }
} Key: a c "1"
[N3LogicReasoner] Reasoning iteration 2 end. changed=false
[N3LogicReasoner] Reasoning complete. Inferred triples: [
  "a b \"1\"",
  "a c \"1\""
]
